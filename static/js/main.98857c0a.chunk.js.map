{"version":3,"sources":["components/Search.js","components/AddParticipantBtn.js","components/AddParticipantTextInput.js","components/TableHeaders.js","components/TableCells.js","components/Table.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","_this","this","react_default","a","createElement","className","onSubmit","e","props","getVenues","htmlFor","type","id","placeholder","value","searchTerm","onChange","handleSearchInput","disabled","length","Component","AddParticipantBtn","onClick","addParticipant","AddParticpantTextInput","participants","index","voted","participant","name","handleInputChange","TableHeaders","prevProps","venue","cleanTable","key","winner","TableCells","state","mouseHover","handleMouseEnter","rowIndex","currentTarget","setState","prevState","handleMouseLeave","_this2","activeCell","increaseVote","onMouseLeave","onMouseOver","concat","Table","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderTableHeaders","bind","assertThisInitialized","disableAddParticipantBtn","venues","map","components_TableHeaders","_this3","components_TableCells","toConsumableArray","target","counterVenue0","counterVenue1","counterVenue2","calculateWinner","venue1","venue2","venue3","forEach","_this4","cellPadding","AddParticipantTextInput","renderTableCells","components_AddParticipantBtn","App","_ref","asyncToGenerator","regenerator_default","mark","_callee","res","_venues","wrap","_context","prev","next","preventDefault","axios","get","sent","data","response","t0","stop","_x","apply","arguments","components_Search","components_Table","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98857c0a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Search extends Component {\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                     <h2 className=\"headline\">Launchplace</h2>\n                     <form className=\"form-inline mb-3\" onSubmit={(e) => this.props.getVenues(e)}>\n                        <div className=\"form-group mb-2\">\n                            <label htmlFor=\"inputPassword2\" className=\"sr-only\">Password</label>\n                            <input type=\"text\" className=\"form-control\" id=\"search-input\" placeholder=\"Search a city\" value={this.props.searchTerm} onChange={(e) => this.props.handleSearchInput(e)} />\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-primary ml-3 mb-2 search-btn\" disabled={this.props.searchTerm.length < 1}>Search</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\n\nconst AddParticipantBtn = (props) => {\n    return(\n        <button className=\"btn btn-primary btn-lg add-btn\" \n        onClick={props.addParticipant} disabled={props.disabled}>\n        Add Participant\n        </button>\n    ) \n}\n\nexport default AddParticipantBtn;","import React from 'react';\n\nconst AddParticpantTextInput = (props) => {\n    return (\n        <td>\n            <input type=\"text\" \n            placeholder=\"Add participant\" \n            className={props.participants[props.index].voted ? 'text-input-disabled' : ''} \n            disabled={props.participants[props.index].voted} \n            value={props.participant.name} \n            onChange={(e) => {props.handleInputChange(e, props.index)}}/></td>\n    )\n};\n\nexport default AddParticpantTextInput;","import React, { Component } from 'react';\n\nclass TableHeaders extends Component {\n    componentDidUpdate(prevProps) {\n        if(this.props.venue !== prevProps.venue){\n            this.props.cleanTable();\n        }\n        \n    }\n    render() {\n        return(\n            <th key={this.props.index}>{this.props.venue.name}{this.props.winner === this.props.venue.name && <h4 className=\"winner\">Winner!</h4>}</th>\n        ) \n    }\n    \n}\n\nexport default TableHeaders;","import React, { Component } from 'react';\n\nclass TableCells extends Component {\n    state = {mouseHover: false};\n\n    handleMouseEnter = (e, rowIndex) => {\n        if(!e.currentTarget.disabled) {\n            this.setState(prevState => ({\n            mouseHover: true\n            }));\n        }\n        return false;\n    }\n\n    handleMouseLeave = (e) => {\n        if(!e.currentTarget.disabled){\n            this.setState(prevState => ({\n                mouseHover: false\n            }));\n        }\n        return false;\n    }\n\n    render() {\n        const activeCell = this.state.mouseHover ? 'active-cell' : 'counter-venue';\n        return(\n            <td>\n                <button \n                onClick={(e) => this.props.increaseVote(e, this.props.rowIndex)}\n                key={this.props.id} \n                onMouseLeave={(e) => this.handleMouseLeave(e)}\n                onMouseOver={(e) => this.handleMouseEnter(e)}\n                disabled={this.props.participants[this.props.rowIndex].name.length < 2 || this.props.participants[this.props.rowIndex].voted } \n                name={`counterVenue${this.props.index}`} \n                className={activeCell}></button>\n            </td>\n        ) \n    }\n    \n}\n\nexport default TableCells;","import React, { Component } from 'react';\nimport AddParticipantBtn from './AddParticipantBtn';\nimport AddParticpantTextInput from './AddParticipantTextInput';\nimport TableHeaders from './TableHeaders';\nimport TableCells from './TableCells';\n\nclass Table extends Component {\n    constructor(props){\n    super(props);\n    this.renderTableHeaders = this.renderTableHeaders.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.addParticipant = this.addParticipant.bind(this);\n    this.increaseVote = this.increaseVote.bind(this);\n    this.cleanTable = this.cleanTable.bind(this)\n    this.state={ \n        participant: {name: ''}, \n        participants: [],\n        winner:null,\n        disableAddParticipantBtn: false,\n    }\n  }\n\n  cleanTable() {\n      this.setState({participants: [], disableAddParticipantBtn: false, winner: null});\n  }\n\n  renderTableHeaders() {\n    return this.props.venues.map((venue, index) => {\n        return (\n            <TableHeaders \n            key={index} \n            index={index} \n            venue={venue} \n            winner={this.state.winner} \n            cleanTable={this.cleanTable} \n            />\n        )\n    }) \n  }\n\n  renderTableCells(rowIndex) {\n      return this.props.venues.map((venue, index) => {\n          return (\n              <TableCells rowIndex={rowIndex} \n              index={index} key={venue.id} \n              name={venue.name} \n              participants={this.state.participants} \n              increaseVote={this.increaseVote}\n              />\n          )\n      })\n  }\n\n  handleInputChange(e, index) {\n     let participants = [...this.state.participants];\n     participants[index].name = e.target.value;\n     this.setState({ participants })\n  }\n  \n\n  addParticipant() {\n     let participant = {\n        id: 0,\n        name: '',\n        counterVenue0: 0,\n        counterVenue1: 0,\n        counterVenue2: 0,\n        voted: false\n     }\n     this.setState(prevState => ({\n        participants: [...prevState.participants, participant],\n        disableAddParticipantBtn : true\n    }));\n  }\n\n  increaseVote(e, index) {\n    let participants = [...this.state.participants];\n    participants[index][e.target.name] = participants[index][e.target.name] + 1;\n    participants[index].voted = true;\n    this.setState({ participants, disableAddParticipantBtn: false});\n    var winner = this.calculateWinner();\n    this.setState({winner})\n  }\n\n  calculateWinner(){\n      var venue1 = 0;\n      var venue2 = 0;\n      var venue3 = 0;\n      this.state.participants.forEach((participant) => {\n        if(participant.counterVenue0 > 0) {\n            venue1 = venue1 + 1;\n        } else if(participant.counterVenue1 > 0) {\n            venue2 = venue2 + 1;\n        } else {\n            venue3 = venue3 + 1;\n        }\n      })\n\n      if(venue1 > venue2 && venue1 > venue3){\n          return this.props.venues[0].name;\n      } else if(venue2 > venue1 && venue2 > venue3){\n          return this.props.venues[1].name;\n      }  else if(venue3 > venue1 && venue3 > venue2) {\n          return this.props.venues[2].name;\n      } else if(venue1 === venue2 || venue1 === venue3 || venue2 === venue3) {\n          return null;\n      }\n  }\n\n  render(){\n    return(\n        <div className=\"row\">\n            {this.props.venues ? <div className=\"col-md-12 text-center\">\n                <div className=\"wrapper\">\n                {this.props.venues.length > 2 ? <table className=\"table-bordered\" cellPadding=\"0\">\n                    <tbody>\n                        <tr>\n                            <th>Participants</th>\n                            {this.renderTableHeaders()}\n                       </tr>\n                        {this.state.participants.length > 0 ? this.state.participants.map((participant, index) => {\n                            return (\n                                <tr key={index}>\n                                    <AddParticpantTextInput participant={participant} \n                                    handleInputChange={this.handleInputChange} \n                                    index={index} \n                                    participants={this.state.participants}/>\n                                    {this.renderTableCells(index)}\n                                </tr>\n                            )\n                            }) : null}\n                    </tbody>\n                </table> : <div>Venues not found</div>}\n                {this.props.venues.length > 2 ? \n                <AddParticipantBtn \n                addParticipant={this.addParticipant} \n                participants={this.state.participants} \n                disabled={this.state.disableAddParticipantBtn}/> \n                : null}\n                </div>\n            </div> : null} \n        </div> \n    )\n  }\n}\n\nexport default Table;","import React, { Component } from 'react';\nimport Search from './Search';\nimport Table from './Table';\n\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.getVenues = this.getVenues.bind(this);\n    this.handleSearchInput = this.handleSearchInput.bind(this);\n    this.state = {\n        searchTerm: '',\n        venues: null\n    }\n  }\n\n   handleSearchInput(e) {\n      this.setState({searchTerm: e.target.value})\n   }\n\n  getVenues = async (e) => {\n     try {\n        e.preventDefault();\n        let searchTerm = this.state.searchTerm;\n        let res = await axios.get(`https://api.foursquare.com/v2/venues/search?client_id=VHLN2OXT2Q4JKVW21ACRW4FF1YR0I50WZWQLQMKBLPN1T1J5&v=20170801&query=\n          lunch&near=${searchTerm}&client_secret=OHBZO41UXZWK1B1NEJG2JG2O52DCBSU13TIJSDVWTXXRIH5T&limit=3`);\n        let venues = res.data.response.venues;\n        this.setState({venues});\n      } catch (err) {\n        let venues = [];\n        this.setState({venues});\n      }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n          <Search getVenues={this.getVenues} handleSearchInput={this.handleSearchInput} searchTerm={this.state.searchTerm}/>\n          <Table venues={this.state.venues} searchTerm={this.state.searchTerm}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}